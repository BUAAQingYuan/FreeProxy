FreeProxy是一个给开发者提供免费、高效的代理IP以及相关服务的框架或工具。

@1
第一个基本的功能就是提供给使用者全面、可靠获取代理IP的接口。这些函数定义在Proxy.ProxyFactory类中。包括但不限于：

*获取一个代理IP(默认为国内的、高匿名)
*获取一个指定参数的代理IP（国内或国外、匿名程度、支持协议等）
*获取一组代理IP（默认为国内的、高匿名），默认为10个
*获取指定数量的代理IP
*获取指定参数(国内或国外、匿名程度、最高延时、数量等)的一组代理IP
*获取一个给定地址段内的代理IP
...


@2
第二个功能是提供对代理IP的条件测试。这些函数定义在Action.CheckProxy类中。包括但不限于:

*测试一个(一组)代理IP的匿名度
*测试一个(一组)代理IP的延时
*测试一个(一组)代理IP的可用性
*测试一个(一组)代理IP的归属地
...

@3
@1和@2只是FreeProxy提供的基本功能，@3就是在@1和@2的基础上提供更高质量的服务。这些函数暂时定义在Proxy.ProxyOptimize类中。包括但不限于:

*找出访问用户指定的targeturl速度最快的代理IP
...

@4
有些想法还处于思考阶段。比如：

*定时切换代理，比如一个小时改变一次代理IP
*持续代理，当前的代理IP不再支持使用或延迟变高时，自动寻找新的代理IP
...



@#
对项目的组织进行一下说明。

Action:代理IP的条件测试

Crawler：爬虫，使用WebMagic爬虫框架。爬虫的数据源定义在xml文件中，通常是一个代理IP网站，<ProxySite>标明页面，<IP>、<Port>、<Anonymity>、
        <Protocol>等标签标明代理IP、端口、匿名度、支持的协议。根据需要还可能会添加描述延时、归属地等的标签。描述的属性用xpath语法标明待
        抓取属性的位置。总之，数据源必须是可配置的，用户可以定义不同的数据源。
        
        我的想法是最好不使用数据库，因为FreeProxy是一个轻量的框架，如果数据量有些大，可以使用一些内存数据库，比如Redis。
        
AnalogTest: 目前没有什么用，可以把一些不太成熟的方法写在这里面。

Proxy: 提供代理服务。最重要的地方。



@last
目前的工作就是构建一个动态、可配置的爬虫和Proxy中基本功能接口的实现。

                                                                                                                      2015.9.17     
        



